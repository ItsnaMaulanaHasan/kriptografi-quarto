---
# title: "Kriptografi Klasik"
format: html
categories: [teori]
toc-title: "On this page"
---

# 6. Transposisi Myzkowski {.unnumbered}

Myzkowski merupakan pengembangan dari teknik transposisi kolom. Teknik ini ditemukan oleh Émile Victor Théodore Myszkowski di tahun 1902. Pengembangan yang dilakukan adalah perubahan dalam pendefinisian dan permutasi kata kuncinya.

Misalnya kata kunci “NUSWANTORO” jika didefinisikan dengan teknik transposisi kolom akan menghasilkan urutan abjad 2 9 7 10 1 3 8 4 6 5. Namun jika kita menggunakan teknik transposisi myzkowski, kata kunci tersebut akan didefinisikan dengan hasil 2 7 5 8 1 2 6 3 4 3.

Pada teknik Myszkowski, huruf yang muncul berulang memiliki indeks urutan yang sama. Sementara itu proses permutasi atau pengambilan ciphertext pada indeks yang sama dilakukan dengan pengambilan secara zig-zag.

# Cara Kerja
 Misalkan kita memiliki teks "TENTUKAN PRIORITAS ANDA SEBAB KITA TIDAK DAPAT MENGERJAKAN SEMUANYA X" dengan kunci "BOROBUDUR", maka proses pengenkripsiannya adalah sebagai berikut

1. Dari kata "BOROBUDUR" akan didefinisikan urutan abjadnya sebagai berikut : 1 3 4 3 1 5 2 5 4

    ![](assets/kriptografi/myzkowski1.png){width="50%" 
    style="text-align:center;"}

2. Setelah itu kita akan membuat tabel yang panjangnya menyesuaikan dengan panjang kuncinya. Kemudian memasukkan setiap urutan kata kunci ke dalam baris paling atas, dan memasukkan Plainteks ke dalam tabel dengan urut dari kiri ke kanan.

    ![](assets/kriptografi/myzkowski2.png){width="50%" 
    style="text-align:center;"}

3. Lalu baca dari urutan kunci yang paling kecil, jika hanya terdapat 1 nomor urut kunci makan membacanya dari atas ke bawah, jika lebih dari 1 maka cara membacanya dengan zig-zag.

    ![](assets/kriptografi/myzkowski3.png){width="50%" 
    style="text-align:center;"}

4. Dari proses transposisi maka didapatkan cipherteks sebagai berikut: 
   TURIN EIIAM RAUAA AAANS ETIRD STTPT JKNYN POAAK ADAEA MNKNT SBBDK EGNEX

# Implementasi Pada Python

Import library
```python
import numpy as np
```

Deklarasi urutan huruf dalam alfabet
```python
abjad = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13,
         'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
```

Memasukkan plaintext
```python
plaintext_myzkowski = input("Masukkan teks yang ingin dienkripsi: ")
```

Menghilangkan spasi ganda dan mengubah plaintext menjadi uppercase
```python
plaintext_myzkowski = plaintext_myzkowski.replace("  ", " ").upper()
print(plaintext_myzkowski)
```

Memasukkan kunci
```python
key_myzkowski = input("Masukkan kunci: ")
```

Menghilangkan spasi dalam kunci
```python
key_myzkowski = key_myzkowski.replace(" ", "")
print(key_myzkowski)
```

## Pemrosesan Kunci

Membuat urutan dari tiap huruf di kunci
```python
sortkey = []
kolom = 0
# Perulangan untuk menambahkan urutan huruf kunci ke list sortkey
for huruf in key_myzkowski:
    # Periksa apakah karakter saat ini adalah huruf alfabet
    if huruf.isalpha():
        sortkey.append(abjad[huruf.lower()])
        kolom = kolom+1
print(f"Urutan kunci dari kata '{key_myzkowski}' adalah: {sortkey}")
```

Menghitung jumlah kemunculan tiap huruf di kunci
```python
# Membuat dictionary untuk melacak jumlah kemunculan setiap nilai
count_key = {}
for nilai in sortkey:
    # Jika nilai sudah ada dalam dictionary, tambahkan 1 ke jumlahnya
    if nilai in count_key:
        count_key[nilai] += 1
    # Jika nilai belum ada dalam dictionary, tambahkan ke dictionary dengan jumlah 1
    else:
        count_key[nilai] = 1
print(count_key)
```

Membuat urutan kolom dalam kunci
```python
hasil_kunci = [None] * len(key_myzkowski)
i = 0
n = 1
while i<len(key_myzkowski):
    non_none_values = list(filter(lambda x: x is not None, sortkey))
    if non_none_values:
        nilai_terkecil = min(non_none_values)
        if count_key[nilai_terkecil]>1:
            for j in range(count_key[nilai_terkecil]):
                marker = sortkey.index(nilai_terkecil)
                hasil_kunci[marker] = n
                sortkey[marker] = None
                nilai_terkecil = min(non_none_values)
        else:
          marker = sortkey.index(nilai_terkecil)
          hasil_kunci[marker] = n
          sortkey[marker] = None
    else:
        break
    n+=1
    i+=1
print(hasil_kunci)
```

Penjelasan prosesnya
- `hasil_kunci` adalah list yang panjangnya sama dengan `key_myzkowski` dan diisi dengan `None`. List ini akan diisi dengan nomor urut sesuai urutan karakter dalam `key_myzkowski`.

```Python
while i < len(key_myzkowski):
    non_none_values = list(filter(lambda x: x is not None, sortkey))
```

- `while i < len(key_myzkowski)`: Loop ini akan berjalan hingga semua karakter dalam `key_myzkowski` diproses.
- `non_none_values`: List yang berisi nilai dari `sortkey` yang tidak `None`. `sortkey` adalah list yang berisi urutan karakter `key_myzkowski` yang telah diurutkan. `filter(lambda x: x is not None, sortkey)` digunakan untuk mendapatkan nilai yang valid (bukan `None`).

```Python
if non_none_values:
    nilai_terkecil = min(non_none_values)
```

- Jika `non_none_values` tidak kosong, berarti masih ada karakter yang perlu diproses.
- `nilai_terkecil` adalah nilai terkecil dalam `non_none_values`. Ini digunakan untuk menentukan urutan karakter yang akan diberi nomor.

```Python
if count_key[nilai_terkecil] > 1:
    for j in range(count_key[nilai_terkecil]):
        marker = sortkey.index(nilai_terkecil)
        hasil_kunci[marker] = n
        sortkey[marker] = None
        nilai_terkecil = min(non_none_values)
```

- `if count_key[nilai_terkecil] > 1`: Jika `nilai_terkecil` memiliki pengulangan (`count_key[nilai_terkecil]` adalah jumlah pengulangan karakter tersebut dalam `key_myzkowski`).
- `for j in range(count_key[nilai_terkecil])`: Loop untuk memproses setiap pengulangan karakter.
- `marker = sortkey.index(nilai_terkecil)`: Temukan indeks dari `nilai_terkecil` di `sortkey`.
- `hasil_kunci[marker] = n`: Beri nomor urut `n` pada posisi yang sesuai di `hasil_kunci`.
- `sortkey[marker] = None`: Tandai posisi yang telah diproses dengan None agar tidak diproses lagi di iterasi berikutnya.
- `nilai_terkecil = min(non_none_values)`: Update `nilai_terkecil` dengan nilai terkecil berikutnya dari `non_none_values`.

```Python
else:
    marker = sortkey.index(nilai_terkecil)
    hasil_kunci[marker] = n
    sortkey[marker] = None
```

- Jika `nilai_terkecil` tidak memiliki pengulangan (`count_key[nilai_terkecil]` adalah 1), cukup tandai posisi `marker` di `hasil_kunci` dengan `n`, dan ubah nilai di `sortkey` menjadi `None`.

## Proses Enkripsi

Membuat susunan plaintext sesuai dengan panjang kunci
```python
# membuat variabel list kosong
enkripsi = []
# perulangan untuk membagi plaintext menjadi potongan-potongan sepanjang panjang kunci dan menyimpan potongan-potongan tersebut ke dalam list
for i in range (0, len(plaintext_myzkowski), len(key_myzkowski)):
    x = plaintext_myzkowski[i:i+len(key_myzkowski)]
    x = list(x)
    enkripsi.append(x)
# perulangan untuk menambahkan # ke dalam list enkripsi index terakhir jika panjangnya kurang dari panjang kunci
while len(enkripsi[len(enkripsi)-1])<len(key_myzkowski):
    enkripsi[len(enkripsi)-1].append(" ")
print(hasil_kunci)
for row in enkripsi:
        print(row)
```

Menghitung jumlah kemunculan tiap angka dalam kunci
```python
# Membuat dictionary untuk melacak jumlah kemunculan setiap nilai
count_hasil_kunci = {}
# Loop melalui setiap nilai dalam list
for nilai in hasil_kunci:
    # Jika nilai sudah ada dalam dictionary, tambahkan 1 ke jumlahnya
    if nilai in count_hasil_kunci:
        count_hasil_kunci[nilai] += 1
    # Jika nilai belum ada dalam dictionary, tambahkan ke dictionary dengan jumlah 1
    else:
        count_hasil_kunci[nilai] = 1
# Cetak dictionary yang berisi jumlah kemunculan setiap nilai
print(count_hasil_kunci)
```

Proses pengenkripsian susuna plainteks
```python
hasil_enkripsi = []
# perulangan untuk menentukan hasil enkripsi
i = 0
while i < len(key_myzkowski):
    non_none_values = list(filter(lambda x: x is not None, hasil_kunci))
    if non_none_values:
        nilai_terkecil = min(non_none_values)
        if count_hasil_kunci[nilai_terkecil] == 1:
            marker = hasil_kunci.index(nilai_terkecil)
            for j in range(len(enkripsi)):
                hasil_enkripsi.append(enkripsi[j][marker])
            hasil_kunci[marker] = None
        else:
            temp = []
            for k in range(i, count_hasil_kunci[nilai_terkecil] + i):
                marker = hasil_kunci.index(nilai_terkecil)
                temp.append(marker)
                hasil_kunci[marker] = None
                nilai_terkecil = min(non_none_values)
            for j in range(len(enkripsi)):
                for indeks in temp:
                    hasil_enkripsi.append(enkripsi[j][indeks])
    i += 1
hasil_enkripsi = ''.join(hasil_enkripsi)
print("Hasil Enkripsi = ", hasil_enkripsi)
```

Penjelasan prosesnya:

```Python
while i < len(key_myzkowski):
    non_none_values = list(filter(lambda x: x is not None, hasil_kunci))
```

- `while i < len(key_myzkowski)`: Loop ini berjalan selama `i` kurang dari panjang `key_myzkowski`.
- `non_none_values`: List ini berisi nilai-nilai dari `hasil_kunci` yang bukan `None`, yang menandakan kolom yang belum diproses.

```Python
if count_hasil_kunci[nilai_terkecil] == 1:
    marker = hasil_kunci.index(nilai_terkecil)
    for j in range(len(enkripsi)):
        hasil_enkripsi.append(enkripsi[j][marker])
    hasil_kunci[marker] = None
```

- `if count_hasil_kunci[nilai_terkecil] == 1`: Jika `nilai_terkecil` hanya muncul sekali (tidak ada pengulangan).
- `marker = hasil_kunci.index(nilai_terkecil)`: Temukan indeks dari `nilai_terkecil` di `hasil_kunci`.
- `for j in range(len(enkripsi))`: Loop melalui setiap baris dalam matriks `enkripsi`.
- `hasil_enkripsi.append(enkripsi[j][marker])`: Tambahkan karakter di kolom `marker` dari setiap baris ke `hasil_enkripsi`.
- `hasil_kunci[marker] = None`: Tandai kolom ini sebagai sudah diproses dengan mengubah nilai di `hasil_kunci` menjadi `None`.

```Python
else:
    temp = []
    for k in range(i, count_hasil_kunci[nilai_terkecil] + i):
        marker = hasil_kunci.index(nilai_terkecil)
        temp.append(marker)
        hasil_kunci[marker] = None
        nilai_terkecil = min(non_none_values)
    for j in range(len(enkripsi)):
        for indeks in temp:
            hasil_enkripsi.append(enkripsi[j][indeks])
```

- `else`: Jika `nilai_terkecil` muncul lebih dari sekali.
- `temp = []`: List sementara untuk menyimpan indeks kolom yang akan diproses.
- `for k in range(i, count_hasil_kunci[nilai_terkecil] + i)`: Loop untuk menambahkan semua indeks kolom yang memiliki nilai `nilai_terkecil` ke `temp`.
- `marker = hasil_kunci.index(nilai_terkecil)`: Temukan indeks dari `nilai_terkecil` di `hasil_kunci`.
- `temp.append(marker)`: Tambahkan indeks `marker` ke `temp`.
- `hasil_kunci[marker] = None`: Tandai kolom ini sebagai sudah diproses dengan mengubah nilai di `hasil_kunci` menjadi `None`.
- `nilai_terkecil = min(non_none_values)`: Update `nilai_terkecil` dengan nilai terkecil berikutnya dari `non_none_values`.
- `for j in range(len(enkripsi))`: Loop melalui setiap baris dalam matriks `enkripsi`.
- `for indeks in temp`: Loop melalui setiap indeks yang disimpan di `temp`.
- `hasil_enkripsi.append(enkripsi[j][indeks])`: Tambahkan karakter di kolom `indeks` dari setiap baris ke `hasil_enkripsi`.

```Python
hasil_enkripsi = ''.join(hasil_enkripsi)
print("Hasil Enkripsi = ", hasil_enkripsi)
```

- `hasil_enkripsi = ''.join(hasil_enkripsi)`: Gabungkan semua karakter di `hasil_enkripsi` menjadi satu string.
- `print("Hasil Enkripsi = ", hasil_enkripsi)`: Cetak hasil enkripsi.

## Proses Dekripsi

Memasukkan cipherteks
```Python
chipertext_myzkowski = input("Masukkan teks yang ingin dienkripsi: ")
```

Proses membuat list yang berisi kunci dan nomor urut hurufnya
```Python
# membuat variabel list kosong
dekripsi = []
key_myzkowski = list(key_myzkowski)
# menambahkan kunci ke dalam list dekripsi
dekripsi.append(key_myzkowski)
# menambahkan list kosong yang akan berisi nomor urutan dari tiap abjad kunci
dekripsi.append([])
# perulangan untuk menambahkan urutan nomor dari tiap abjad kunci
i = 0
while i<len(key_myzkowski):
    dekripsi[1].append(i+1)
    i+=1
print(dekripsi)
```

Outputnya:
```Python
[['u', 'd', 'i', 'n', 'u', 's', 'u', 'n', 'g', 'g', 'u', 'l'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]
```

Mengurutkan isi list berdasarkan dari list pertama yang berisi kunci
```Python
dekripsi = np.array(dekripsi)
dekripsi = dekripsi [ :, dekripsi[0].argsort()]
dekripsi = dekripsi.tolist()
print(dekripsi)
```

Outputnya:
```Python
[['d', 'g', 'g', 'i', 'l', 'n', 'n', 's', 'u', 'u', 'u', 'u'], ['2', '9', '10', '3', '12', '4', '8', '6', '1', '5', '7', '11']]
```

Menghitung jumlah frekuensi abjad dari list yang berisi kunci
```Python
count_key_decrypt = {}
for nilai in dekripsi[0]:
    # Jika nilai sudah ada dalam dictionary, tambahkan 1 ke jumlahnya
    if nilai in count_key_decrypt:
        count_key_decrypt[nilai] += 1
    # Jika nilai belum ada dalam dictionary, tambahkan ke dictionary dengan jumlah 1
    else:
        count_key_decrypt[nilai] = 1
print(count_key_decrypt)
```

Membaca karakter dari ciphertext dan menempatkannya ke dalam list dekripsi berdasarkan kunci yang telah diuraikan
```Python
indeks = 0
i = 0
# perulangan untuk menambahkan abjad ciphertext ke dalam list berdasarkan kunci dan jumlah frekuensi abjad kunci
while i<len(key_myzkowski):
    if count_key_decrypt[dekripsi[0][i]]>1:
        for k in range(2,int((len(chipertext_myzkowski)/len(key_myzkowski))+2)):
            for j in range(count_key_decrypt[dekripsi[0][i]]):
                dekripsi[k].append(chipertext_myzkowski[indeks])
                indeks+=1
        i+=(count_key_decrypt[dekripsi[0][i]]-1)
    else:
        for k in range(2, int((len(chipertext_myzkowski) / len(key_myzkowski)) + 2)):
            dekripsi[k].append(chipertext_myzkowski[indeks])
            indeks+=1
    i+=1
print(dekripsi)
```

Penjelasan prosesnya:

```Python
while i < len(key_myzkowski):
    if count_key_decrypt[dekripsi[0][i]] > 1:
```

- `while i < len(key_myzkowski)`: Loop ini berjalan selama `i` kurang dari panjang `key_myzkowski`.
- `if count_key_decrypt[dekripsi[0][i]] > 1`: Memeriksa apakah karakter pada posisi `i` di `dekripsi[0]` (baris kunci) memiliki pengulangan. Jika iya, berarti kita akan menangani kolom yang berulang.

```Python
for k in range(2, int((len(chipertext_myzkowski) / len(key_myzkowski)) + 2)):
    for j in range(count_key_decrypt[dekripsi[0][i]]):
        dekripsi[k].append(chipertext_myzkowski[indeks])
        indeks += 1
i += (count_key_decrypt[dekripsi[0][i]] - 1)
```

- `for k in range(2, int((len(chipertext_myzkowski) / len(key_myzkowski)) + 2))`: Loop melalui setiap baris dalam list `dekripsi`, dimulai dari baris kedua. Perulangan ini dilakukan sesuai dengan jumlah kolom dan panjang ciphertext.
- `for j in range(count_key_decrypt[dekripsi[0][i]])`: Loop ini dilakukan sesuai dengan jumlah pengulangan karakter yang sama dalam kunci.
- `dekripsi[k].append(chipertext_myzkowski[indeks])`: Tambahkan karakter dari `chipertext_myzkowski` pada posisi indeks ke baris `k` dalam list `dekripsi`.
- `indeks += 1`: Update `indeks` untuk karakter berikutnya.
- `i += (count_key_decrypt[dekripsi[0][i]] - 1)`: Lewati jumlah karakter pengulangan di `key_myzkowski`.

```Python
else:
    for k in range(2, int((len(chipertext_myzkowski) / len(key_myzkowski)) + 2)):
        dekripsi[k].append(chipertext_myzkowski[indeks])
        indeks += 1
```

- `else`: Jika karakter pada posisi `i` di `dekripsi[0]` tidak memiliki pengulangan.
- `for k in range(2, int((len(chipertext_myzkowski) / len(key_myzkowski)) + 2))`: Loop melalui setiap baris dalam list `dekripsi`, dimulai dari baris kedua.
- `dekripsi[k].append(chipertext_myzkowski[indeks])`: Tambahkan karakter dari `chipertext_myzkowski` pada posisi `indeks` ke baris `k` dalam list `dekripsi`.
- `indeks += 1`: Update `indeks` untuk karakter berikutnya.

Outputnya:
```Python
[['d', 'g', 'g', 'i', 'l', 'n', 'n', 's', 'u', 'u', 'u', 'u'], ['2', '9', '10', '3', '12', '4', '8', '6', '1', '5', '7', '11'], ['E', 'N', 'F', 'K', 'R', 'N', 'I', 'K', 'T', 'I', ' ', 'O'], ['A', 'D', 'I', 'T', 'U', 'I', 'U', 'A', 'M', 'K', ' ', 'N'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', ' ', ' ', ' ']]
```

Mengurutkan list dekripsi berdasarkan nilai pada list kedua dan kemudian menggabungkan karakter dari dekripsi untuk menghasilkan teks dekripsi akhir
```Python
dekripsi = np.array(dekripsi)
# mengurutkan list berdasarkan list kedua dan menampilkan hasil dari dekripsinya
dekripsi = dekripsi [ :, dekripsi[1].astype(int).argsort()]
hasil_dekripsi = []
for index, row in enumerate(dekripsi):
    if index != 0 and index != 1:
        print(row)
for i in range(2,len(dekripsi)):
    for j in range(len(dekripsi[0])):
      hasil_dekripsi.append(dekripsi[i][j])
hasil_dekripsi = ''.join(hasil_dekripsi)
print("\nHasil Dekripsi = ", hasil_dekripsi)
```

Penjelasan Prosesnya:

- `dekripsi = np.array(dekripsi)` : `dekripsi` dikonversi menjadi array NumPy untuk memudahkan manipulasi data, terutama untuk sorting.

```Python
dekripsi = dekripsi[:, dekripsi[1].astype(int).argsort()]
```

- `dekripsi[:, ...]`: Mengambil semua baris (`:`) dari `dekripsi`, tetapi hanya kolom yang diurutkan berdasarkan baris kedua.
- `dekripsi[1]`: Mengambil baris kedua dari `dekripsi`, yang berisi nilai-nilai kunci yang digunakan untuk pengurutan.
- `.astype(int)`: Mengonversi nilai di baris kedua menjadi tipe integer jika belum dalam tipe ini, agar bisa diurutkan.
- `.argsort()`: Mengembalikan indeks yang akan mengurutkan array. Indeks ini digunakan untuk mengurutkan `dekripsi` berdasarkan nilai di baris kedua.

```Python
for index, row in enumerate(dekripsi):
    if index != 0 and index != 1:
        print(row)
```

- `for index, row in enumerate(dekripsi)`: Loop ini berjalan melalui setiap baris dalam `dekripsi`.
- `if index != 0 and index != 1`: Memeriksa apakah indeks tidak sama dengan 0 atau 1, karena baris ini adalah kunci dan mungkin tidak perlu ditampilkan atau diproses lebih lanjut.
- `print(row)`: Mencetak baris yang relevan untuk melihat hasil sementara dari `dekripsi`.

```Python
for i in range(2, len(dekripsi)):
    for j in range(len(dekripsi[0])):
        hasil_dekripsi.append(dekripsi[i][j])
```

- `for i in range(2, len(dekripsi))`: Loop melalui baris `dekripsi` dimulai dari baris ketiga, karena baris pertama dan kedua adalah kunci dan pengurutan.
- `for j in range(len(dekripsi[0]))`: Loop melalui setiap kolom dalam baris `dekripsi`.
- `hasil_dekripsi.append(dekripsi[i][j])`: Menambahkan karakter dari posisi `(i, j)` di `dekripsi` ke `hasil_dekripsi`.

```Python
hasil_dekripsi = ''.join(hasil_dekripsi)
print("\nHasil Dekripsi = ", hasil_dekripsi)
```

- `hasil_dekripsi = ''.join(hasil_dekripsi)`: Menggabungkan semua karakter di `hasil_dekripsi` menjadi satu string.
- `print("\nHasil Dekripsi = ", hasil_dekripsi)`: Mencetak hasil dekripsi akhir.