---
# title: "Kriptografi Klasik"
format: html
categories: [teori]
toc-title: "On this page"
---

# 2. Monoalphabetic Random Key {.unnumbered}

Transposisi kolom dalam kriptografi adalah teknik enkripsi yang melibatkan pengubahan urutan karakter atau simbol dalam sebuah pesan atau teks dengan cara mengatur ulang posisi karakter berdasarkan aturan tertentu yang ditentukan oleh kunci. Dalam transposisi kolom, teks asli dibagi menjadi kolom-kolom, kemudian urutan kolom tersebut diubah sesuai dengan aturan yang ditentukan oleh kunci enkripsi. Kunci enkripsi transposisi kolom biasanya berupa susunan angka atau urutan yang menentukan urutan kolom mana yang harus diambil dan dalam urutan apa.

# Analogi Transposisi Kolom
Bayangkan Kita memiliki rak buku dengan beberapa kolom dan setiap kolom berisi tumpukan buku. 

1. **Susunan Awal:**
   - Kolom 1 : A, B, C
   - Kolom 2 : D, E, F
   - Kolom 3 : G, H, I

2. **Transposisi Kolom:**
   - Kita akan memutuskan untuk menukar posisi kolom-kolom ini. Misalnya, kolom 1 dipindahkan ke tempat kolom 3, kolom 2 tetap di tempat, dan kolom 3 dipindahkan ke tempat kolom 1.

3. **Susunan Setelah Transposisi:**
   - Kolom 1 : G, H, I (dulu Kolom 3)
   - Kolom 2 : D, E, F
   - Kolom 3 : A, B, C (dulu Kolom 1) 

Dengan kata lain, transposisi kolom mengubah urutan kolom tanpa mengubah isi kolom. Dalam kriptografi, ini dilakukan untuk mengacak data agar lebih sulit ditebak oleh pihak yang tidak berwenang.

# Contoh Soal
Untuk lebih jelasnya, terdapat sebuah pesan yaitu
“TENTUKAN PRIORITAS ANDA SEBAB KITA TIDAK DAPAT MENGERJAKAN SEMUANYA X” yang akan dienkripsi menggunakan metode transposisi kolom dengan kata kunci “PENTING” Maka proses enkripsi nya adalah sebagai berikut:

**Proses Penyandian**

1. Buat tabel dengan ukuran kolom sesuai dengan panjang dari kata kunci yang telah diproses sebelumnya

    ![](assets/kriptografi/tkolom2.png){width="70%" 
    style="text-align:center;"}

2. Kemudian masukkan kunci kedalam kolom tabel

    ![](assets/kriptografi/tkolom3.png){width="70%" 
    style="text-align:center;"}

3. Selanjutnya, masukan pesan yang akan dienkripsi dengan cara menyisipkannya dari kiri ke kanan secara berurutan

    ![](assets/kriptografi/tkolom4.png){width="70%" 
    style="text-align:center;"}

4. Lalu kunci didefinisikan sesuai urutan abjad menjadi

    ![](assets/kriptografi/tkolom.png){width="70%" 
    style="text-align:center;"}

5. Setelah itu, kolom  dengan urutan abjad terkecil dipindahkan ke posisi depan, diikuti dengan kolom urutan abjad terkecil lainya

    ![](assets/kriptografi/tkolom5.png){width="70%" 
    style="text-align:center;"}

6. Baca huruf ciphertext dari atas kebawah kemudian dimulai lagi dari atas sesuai dengan kolom yang sudah diurutkan

    ![](assets/kriptografi/tkolom6.png){width="70%" 
    style="text-align:center;"}

## Implementasi Pada Python

Masukkan plaintext
```python
plainText = input("Plaintext : ")
```

Masukkan kunci
```python
key = input("masukkan kunci : ")
```

Membersihkan teks dari spasi ganda
```python
cleanPlainTeks = plainTeks.replace(" ", "")
print(cleanPlainTeks)
```

Deklarasi urutan huruf dalam alfabet
```python
ascii = {
'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 
'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 
'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26
}
```

### Proses Enkripsi

Inisialisasi list untuk menyimpan urutan numerik dari setiap huruf alfabet
```python
kolom = 0
angka_urutan = []
```

Mengonversi setiap huruf dalam kata kunci menjadi urutan numeriknya sesuai dengan posisi dalam alfabet
```python
for huruf in key:
    if huruf.isalpha():
        angka_urutan.append(ascii[huruf.lower()])
        kolom = kolom+1
        cleanKey = angka_urutan

print(f"Urutan kunci dari kata '{key}' adalah {angka_urutan}")
```

For More Detail :

- `for huruf in key` : Loop ini digunakan untuk memeriksa setiap huruf dalam variabel key, yang diharapkan merupakan kata kunci yang diberikan oleh pengguna
-  `if huruf.isalpha()` : Kondisi ini memastikan bahwa hanya karakter alfabet yang akan diproses. Karakter non-alfabet akan dilewati
- `huruf.lower(): Mengubah huruf menjadi huruf kecil untuk konsistensi, sehingga tidak ada perbedaan antara huruf besar dan kecil
- `ascii[huruf.lower()]` : Mengambil nilai urutan numerik dari huruf. Di sini diasumsikan ada sebuah kamus (dictionary) bernama ascii yang memetakan setiap huruf ke urutan numeriknya
- `angka_urutan.append(...)` : Menambahkan urutan numerik dari huruf ke dalam list angka_urutan
- `kolom = kolom + 1` : Menghitung jumlah kolom dengan menambah nilai kolom setiap kali huruf diproses
- `cleanKey = angka_urutan` : Menyimpan hasil akhir urutan numerik ke dalam variabel cleanKey


Membuat sebuah matriks kosong untuk menyimpan teks yang telah diolah dalam bentuk matriks
```python
matrix = []
```

Menghitung panjang dari teks yang telah dibersihkan dan disimpan dalam variabel cleanPlainTeks
```python
panjang = len(cleanPlainTeks)
```

Mencari tahu berapa kali kolom dapat digunakan untuk memuat seluruh teks, dengan membagi panjang teks dengan jumlah kolom
```python
temp = panjang/kolom
```

Membulatkan hasil pembagian sebelumnya ke bilangan bulat terdekat
```python
bulat = round(temp)
```

Menghitung jumlah baris untuk memuat teks dalam matriks
```python
if temp - bulat == 0:
    baris = bulat
else:
    if temp - bulat < 0:
        baris = bulat
    else:
        baris = bulat + 1
print(baris)
```

For More Detail :

- `temp` : hasil pembagian panjang teks dengan jumlah kolom
- `bulat`: hasil pembagian yang dibulatkan ke bilangan bulat terdekat. Jika `temp` adalah bilangan bulat (tidak ada sisa), jumlah baris adalah bulat. Jika ada sisa, jumlah baris adalah `bulat + 1`

Mengisi matriks dengan karakter dari teks yang telah dibersihkan (cleanPlainTeks)
```python
for i in range(baris):
    row = []
    for j in range(kolom):
        if i * kolom + j < len(cleanPlainTeks):
            elemen = cleanPlainTeks[i * kolom + j]
        else:
            elemen = " "
        row.append(elemen)
    matrix.append(row)
```

For More Detail :

- `for i in range(baris)` : Loop untuk setiap baris dalam matriks
- `row = []` : Inisialisasi list kosong untuk setiap baris
- `if i * kolom + j < len(cleanPlainTeks)` : Memeriksa apakah indeks saat ini berada dalam rentang panjang teks yang dibersihkan.
- `elemen = cleanPlainTeks[i * kolom + j]` : Jika indeks berada dalam rentang, maka ambil karakter dari `cleanPlainTeks` berdasarkan indeks yang dihitung.
- `else` : Jika indeks melebihi panjang teks, isi elemen dengan spasi.
- `row.append(elemen)` : Menambahkan elemen ke dalam baris.
- `matrix.append(row)` : Menambahkan baris yang telah diisi ke dalam matriks.`

Mencetak matriks
```python
print("Matriks yang Anda buat:")
for row in matrix:
    print(row)
```

Mentransposisikan matriks yang telah dibuat dan kemudian mencetak matriks yang telah ditransposisikan
```python
transposed_matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
for row in transposed_matrix:
    print(row)
```

For More Detail :

- `for i in range(len(matrix[0]))` : Iterasi melalui indeks kolom matriks asli
- `row[i] for row in matrix` : Untuk setiap indeks kolom i, ambil elemen i dari setiap baris dalam matriks asli dan akan menghasilkan kolom baru dari elemen-elemen tersebut, membentuk baris baru di matriks yang ditransposisikan

Membuat list kosong dengan panjang yang sama dengan cleanKey untuk menyimpan urutan indeks
```python
order = [None] * len(cleanKey)
```

Mengurutkan elemen-elemen dalam cleanKey berdasarkan nilai terkecil hingga terbesar
```python
i = 0
while len(cleanKey) > 0:
    non_none_values = list(filter(lambda x: x is not None, cleanKey))
    if non_none_values:
        nilai_terkecil = min(non_none_values)
        marker = cleanKey.index(nilai_terkecil)

        order[marker] = i
        cleanKey[marker] = None 
        i = i + 1
    else:
        break
print(order)
```

For More Detail :

- `i = 0` : Inisialisasi counter i
- `while len(cleanKey) > 0` : Loop hingga cleanKey kosong (semua elemen None)
- `non_none_values = list(filter(lambda x: x is not None, cleanKey))` : Membuat list yang hanya berisi elemen-elemen cleanKey yang bukan None
- `if non_none_values` : Mengecek apakah list non_none_values tidak kosong
` nilai_terkecil = min(non_none_values)` : Mencari nilai terkecil dari non_none_values
- `marker = cleanKey.index(nilai_terkecil)` : Mendapatkan indeks dari nilai terkecil dalam cleanKey
Menyimpan Urutan dan Menghapus Nilai Terkecil:
- `order[marker] = i` : Menyimpan urutan i pada indeks marker di list order
- `cleanKey[marker] = None` : Menghapus nilai terkecil dari cleanKey dengan mengubahnya menjadi None
- `i = i + 1` : Increment counter i.

Mengubah urutan kolom matriks `transposed_matrix` berdasarkan urutan yang telah diatur dalam `order`, dan kemudian mencetak matriks yang sudah diubah urutan kolomnya
```python
new_matrix = []
while len(order) > 0:
    non_none_values = list(filter(lambda x: x is not None, order))
    if non_none_values:
        nilai_terkecil = min(non_none_values)
        marker = order.index(nilai_terkecil)
       
        new_matrix.append(transposed_matrix[marker])
        order[marker] = None
    else:
        break

for row in new_matrix:
    print(row)
```

For More Detail :

- `new_matrix = []` : Membuat list kosong new_matrix untuk menampung baris-baris matriks yang baru diurutkan
Looping untuk Mengubah Urutan Kolom:
- `while len(order) > 0` : Melakukan looping selama masih ada elemen yang tersisa dalam order
- `non_none_values = list(filter(lambda x: x is not None, order))` : Membuat list non_none_values yang hanya berisi nilai-nilai yang bukan None dari order
- `if non_none_values` : Memeriksa apakah non_none_values tidak kosong
- `nilai_terkecil = min(non_none_values)` : Menemukan nilai terkecil dari non_none_values
- `marker = order.index(nilai_terkecil)` : Mencari indeks dari nilai_terkecil dalam order
- `new_matrix.append(transposed_matrix[marker])` : Menambahkan baris dari transposed_matrix yang sesuai dengan marker ke new_matrix
- `order[marker] = None` : Menghapus nilai yang telah diproses dengan mengubahnya menjadi None
- `else: break` : Menghentikan loop jika `non_none_values kosong`, yang berarti semua nilai dalam order telah diproses

Mengonversi matriks `new_matrix` menjadi string tunggal dengan menggabungkan nilai-nilainya secara berurutan dan menghapus spasi ekstra di akhir string
```python
result_string = ""

for row in new_matrix:
    for value in row:
        result_string += str(value)

result_string = result_string.strip()

print(result_string)
```

For More Detail :

- `result_string = ""` : Inisialisasi string kosong result_string yang akan digunakan untuk menyimpan hasil akhir
- `for row in new_matrix:` : Melakukan iterasi melalui setiap baris dalam new_matrix
- `for value in row:` : Melakukan iterasi melalui setiap nilai dalam baris row
- `result_string += str(value)` : Mengonversi nilai value menjadi string (jika belum string) dan menambahkannya ke result_string
- `result_string = result_string.strip()` : Menghapus spasi ekstra di awal dan akhir string menggunakan metode strip()

```python
Hasil Ciphertext : ENTKFINOKKM TIAIRA
```

### Proses Dekripsi

```python
cipherTeks = input("masukkan kata : ")
```

```python
key = input("masukkan kunci : ")
```

```python
cleanCipherTeks = cipherTeks.replace(" ", " ")
print(cleanCipherTeks)
```

```python
kolom = 0
```

```python
angka_urutan = []
```

```python
for huruf in key:
    if huruf.isalpha():
        angka_urutan.append(ascii[huruf.lower()])
        kolom = kolom+1
        cleanKey = angka_urutan

print(f"Urutan kunci dari kata '{key}' adalah: {angka_urutan}")
```

```Python
matrix = []
```

```python
panjang = len(cleanCipherTeks)
```

```python
temp = panjang/kolom
```

```python
baris = round(temp)
print(baris)
```

```python
for i in range(baris):
    row = []
    for j in range(kolom):
        if i * kolom + j < len(cleanCipherTeks):
            elemen = cleanCipherTeks[i + baris * j]
        else:
            elemen = "a"
        row.append(elemen)
    matrix.append(row)
```

```python
print("Matriks yang Anda buat:")
for row in matrix:
    print(row)
```

```python
transposed_matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
for row in transposed_matrix:
    print(row)
```

```python
order = [None] * len(cleanKey)
i = 0
while len(cleanKey) > 0:
    non_none_values = list(filter(lambda x: x is not None, cleanKey))
    if non_none_values:
        nilai_terkecil = min(non_none_values)
        marker = cleanKey.index(nilai_terkecil)
        order[marker] = i
        cleanKey[marker] = None  
        i = i + 1
    else:
        break
print(order)
```

```python
transposed_matrix = [transposed_matrix[i] for i in order]

for row in transposed_matrix:
    print(row)
```

```python
matriks = [[row[i] for row in transposed_matrix] for i in range(len(transposed_matrix[0]))]
for row in matriks:
    print(row)
```

```python
result_string = ""

for row in matriks:
    for value in row:
        result_string += str(value)

result_string = result_string.strip()

print(result_string)
```

`Hasil Dekripsi : TEKNIKINFORMATIKA`

**Perbedaan Proses :**

- Enkripsi: Teks asli diubah menjadi matriks berdasarkan kolom kunci, kemudian kolom-kolom diurutkan berdasarkan kunci. Pada enkripsi, `transposed_matrix` adalah matriks transposisi dari matrix awal
- Dekripsi: Teks sandi diubah menjadi matriks berdasarkan kolom kunci, kemudian baris-baris diurutkan berdasarkan kunci untuk mengembalikan teks asli. Pada dekripsi, `transposed_matrix` diurutkan berdasarkan order untuk mengembalikan teks asli