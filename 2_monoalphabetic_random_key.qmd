---
# title: "Kriptografi Klasik"
format: html
categories: [teori]
toc-title: "On this page"
---

# 2. Monoalphabetic Random Key {.unnumbered}

Monoalphabetic cipher (Cipher abjad tunggal) adalah enkripsi metode subtitusi yang memetakan tiap-tiap abjad dengan abjad lain secara random, bukan metode pergeseran seperti Caesar cipher.

Jumlah kemungkinan susunan huruf-huruf cipherteks yang dapat dibuat pada sembarang cipher abjad-tunggal adalah sebanyak 
26! = 403.291.461.126.605.635.584.000.000

# Cara kerja

1. Pembentukan tabel substitusi dapat dibentuk secara acak seperti contoh ini

    ![](assets/kriptografi/monoalphabetic1.png){width="70%" 
    style="text-align:center;"}

2. Atau dengan kalimat yang bisa kita jadikan sebagai kunci

    contoh : we hope you enjoy this book

3. Selanjutnya kita harus membuang duplikasi huruf pada kunci

    Hasilnya : wehopyunjtisbk

4. Maka hasil tabel substitusinya akan seperti ini

    ![](assets/kriptografi/monoalphabetic2.png){width="70%" 
    style="text-align:center;"}

# Implementasi Pada Python

Import library
```python
import random
```

Deklarasi list abjad yang berisi huruf a-z
```python
abjad = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
```

Memasukkan plainteks
```python
plaintext_monoalphabetic = input("Masukkan teks yang akan dienkripsi: ")
```

Mengubah plainteks menjadi lowercase
```python
plaintext_monoalphabetic = plaintext_monoalphabetic.lower()
print(plaintext_monoalphabetic)
```

Generate Random Key
```python
# mengacak urutan huruf-huruf dalam list abjad untuk mendapatkan random key
abjad_random = abjad.copy()
random.shuffle(abjad_random)

# menggabungkan huruf-huruf yang sudah diacak menjadi sebuah string
key_monoalphabetic = ''.join(abjad_random)

print("ðŸ”‘ = ", key_monoalphabetic)
```

Visualisasi substitusi huruf menjadi key
```python
print("\nVisualisasi substitusi huruf menjadi kunci:")
print("ðŸ”‘ = ", key_monoalphabetic)
# perulangan untuk menampilkan bentuk substitusi dari key
for huruf_abjad, huruf_kunci in zip(abjad, key_monoalphabetic):
    print(f"{huruf_abjad} => {huruf_kunci}")
```

## Proses Enkripsi

Membuat mapping (pemetaan) antara huruf abjad dengan kunci
```python
mapping = dict(zip(abjad, key_monoalphabetic))
print(mapping)
```

Melakukan proses enkripsi dengan mengganti setiap karakter dalam plaintext dengan karakter yang sesuai dalam kunci, atau mempertahankan karakter jika tidak ada dalam kunci
```python
ciphertext_monoalphabetic = ''.join(mapping.get(karakter, karakter) for karakter in plaintext_monoalphabetic)
```

Menampilkan bentuk substitusi dari key terhadap plaintext
```Python
print("Visualisasi penggantian huruf pada plaintext:")
for huruf_plaintext, huruf_ciphertext in zip(plaintext_monoalphabetic, ciphertext_monoalphabetic):
    if huruf_plaintext in abjad:
        print(f"{huruf_plaintext} => {huruf_ciphertext}")
```

Menampilkan hasil enkripsinya
```Python
print("Teks terenkripsi:", ciphertext_monoalphabetic)
```

## Proses Dekripsi

Memasukkan cipherteks
```Python
ciphertext_monoalphabetic = input("Masukkan teks yang akan di dekripsi: ").lower()
```

Memasukkan kunci
```Python
key_decyrpt = input("Masukkan kunci untuk dekripsi: ")
```

Membuat mapping (pemetaan) terbalik antara kunci dan list abjad
```Python
reverse_mapping = dict(zip(key_decyrpt, abjad))
print(reverse_mapping)
```

Melakukan proses dekripsi dengan menggantikan setiap karakter dalam cipherteks dengan karakter yang sesuai di kunci dalam pemetaan terbalik, atau mempertahankan karakter jika tidak ada dalam pemetaan terbalik
```Python
hasil_dekripsi = ''.join(reverse_mapping.get(karakter, karakter) for karakter in ciphertext_monoalphabetic)
```

Menampilkan bentuk substitusi dari key terhadap cipherteks
```Python
for huruf_awal, huruf_terdekripsi in zip(ciphertext_monoalphabetic, hasil_dekripsi):
  if huruf_awal in abjad:
      print(f"{huruf_awal} => {huruf_terdekripsi}")
```

Menampilkan hasil dekripsi
```Python
print("Teks terdekripsi:", hasil_dekripsi)
```