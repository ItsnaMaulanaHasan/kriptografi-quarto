---
# title: "Kriptografi Klasik"
format: html
categories: [teori]
toc-title: "On this page"
---

# 1. Caesar Cipher {.unnumbered}

Caesar Cipher adalah metode enkripsi sederhana yang menggeser setiap huruf dalam teks sejumlah posisi tertentu dalam alfabet. Misalnya, dengan pergeseran tiga posisi ke kanan, huruf A akan menjadi D, huruf B menjadi E, dan seterusnya. Ini adalah teknik kriptografi klasik yang dinamai dari Julius Caesar, yang dikatakan menggunakannya untuk mengamankan pesan-pesan militer.

# Analogi Caesar Cipher
Misalkan kita memiliki teks "HELLO" dan kita ingin mengenkripsinya dengan kunci pergeseran 3 posisi ke kanan.

1. **Susunan Awal:**
   - Plaintext/Pesan : HELLO
   - Ciphertext : ?

2. **Enkripsi Caesar Cipher:**
   - Contoh Proses Enkripsi dengan menggeser setiap huruf ke kanan sebanyak 3 posisi.
        <br>
        H -> K
        <br>
        E -> H
        <br>
        L -> O
        <br>
        L -> O
        <br>
        O -> R

3. **Susunan Setelah Enkripsi:**
    Jadi, hasil enkripsi dari "HELLO" adalah  "KHOOR". <br>
    Ciphertext : "KHOOR"


# Contoh Soal
Berikut ini adalah contoh soal yang akan kita kerjakan
“mahardhika@23#” yang akan dienkripsi menggunakan metode caesar cipher kolom dengan kunci 3 Maka proses enkripsi nya adalah sebagai berikut:


## Implementasi Pada Python

LANGKAH 1 : <br>
Deklarasi kamus (dictionary) abjad_indeks -> Kamus ini memetakan setiap huruf alfabet ke sebuah indeks numerik.
```python
abjad_indeks = {
    'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5,
    'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10,
    'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15,
    'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,
    'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26
}
```

LANGKAH 2 : <br>
 Deklarasi variabel `key` -> Nilai key ditetapkan ke 3, yang berarti setiap huruf dalam pesan akan **digeser sebanyak 3 posisi dalam alfabet** untuk enkripsi. Selanjutnya Input variabel `pesan` -> Pesan yang akan dienkripsi.

```python
# Key untuk pergeseran
key = 3
# Deklarasi variabel pesan: Pesan yang akan dienkripsi.
pesan = input("Masukkan pesan     : ")
cleanPesan = pesan.replace(" ", "")
print("Pesan Anda         :",cleanPesan)
```

```python
Pesan Anda : udinus
```
### Proses Enkripsi
LANGKAH 3 : <br>
 Inisialisasi `pesan_terenkripsi`: String kosong untuk menyimpan hasil enkripsi.

*   Iterasi melalui setiap huruf dalam pesan: Menggunakan loop for.
Cek apakah `huruf` ada di `abjad_indeks`:
*   Jika **Ya**
Hitung indeks baru dengan formula `(abjad_indeks[huruf] + key) % 26`. Ini menggeser posisi huruf dalam alfabet.
*   Cari huruf baru yang sesuai dengan indeks baru dari daftar kunci `abjad_indeks` dan tambahkan ke `pesan_terenkripsi`.
*   Jika **Tidak** (misalnya angka atau simbol):
Tambahkan huruf tersebut langsung ke` pesan_terenkripsi` tanpa perubahan.

```python

pesan_terenkripsi = ''
for huruf in cleanPesan:
    if huruf in abjad_indeks:
        indeks = (abjad_indeks[huruf] + key) % 26
        pesan_terenkripsi += list(abjad_indeks.keys())[indeks - 1]
    else:
        pesan_terenkripsi += huruf

print("Pesan terenkripsi:", pesan_terenkripsi)
```

```python
Pesan terenkripsi: xglqxv
```

### Proses Dekripsi
LANGKAH 4 : <br> 
 Inisialisasi `pesan_terdekripsi`: String kosong untuk menyimpan hasil dekripsi.

*   Iterasi melalui setiap huruf dalam pesan: Menggunakan loop for.
Cek apakah `huruf` ada di `abjad_indeks`:
*   Jika **Ya**
Hitung indeks baru dengan formula `(abjad_indeks[huruf] - key) % 26`. Ini menggeser posisi huruf dalam alfabet.
*   Cari huruf baru yang sesuai dengan indeks baru dari daftar kunci `abjad_indeks` dan tambahkan ke `pesan_terenkripsi`.
*   Jika **Tidak** (misalnya angka atau simbol):
Tambahkan huruf tersebut langsung ke` pesan_terenkripsi` tanpa perubahan.
```python
pesan_terdekripsi = ''
for huruf in pesan_terenkripsi:
    if huruf in abjad_indeks:
        indeks = (abjad_indeks[huruf] - key) % 26
        pesan_terdekripsi += list(abjad_indeks.keys())[indeks - 1]
    else:
        pesan_terdekripsi += huruf

print("Pesan terdekripsi:", pesan_terdekripsi)
```
```python
Pesan terdekripsi:: udinus
```


