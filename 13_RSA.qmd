---
# title: "Kriptografi Klasik"
format: html
categories: [teori]
toc-title: "On this page"
---

# 5. RSA {.unnumbered}

Transposisi Route merupakan metode yang dilakukan dengan cara pesan disusun dalam grid (biasanya persegi atau persegi panjang), dan huruf-huruf pesan ditempatkan di dalam sel-sel grid sesuai dengan suatu pola atau rute tertentu. 
Setelah pesan disusun dalam grid, pesan diambil dengan mengikuti pola atau rute yang telah ditentukan, seperti zigzag, spiral, atau pola lainnya.

Salah satu contoh teknik transposisi terkenal adalah Union Route yang dipakai oleh Tentara Union selama Perang Saudara Amerika. Dengan cara pesan disusun dalam grid, lalu diambil kembali dengan mengikuti pola atau rute tertentu. Ini memberikan tingkat keamanan tambahan dalam komunikasi militer.

Transposisi route memiliki banyak variasi pembacaan teks yang dapat digunakan untuk mengambil kembali pesan dari grid yang telah disusun. Beberapa variasi algoritma pembacaan yang umum digunakan meliputi:

1. Spiral (Spiral Route)
   - Pesan diambil kembali dengan mengikuti pola spiral dari 
     luar ke dalam atau sebaliknya.
   - Mulai dari titik awal di salah satu sudut grid dan 
     bergerak ke dalam dengan mengikuti pola spiral, 
     mengambil setiap huruf pada gilirannya.
2. Zigzag (Zigzag Route)
   - Pesan diambil kembali dengan mengikuti pola zigzag di 
     sepanjang baris atau kolom grid.
   - Mulai dari titik awal, huruf-huruf pesan diambil secara 
     bergantian dari baris ke baris atau dari kolom ke 
     kolom, membentuk pola zigzag.
3. Ular Tangga (Staircase Route)
   - Pesan diambil kembali dengan mengikuti pola ular tangga 
     yang naik atau turun.
   - Mulai dari titik awal, huruf-huruf pesan diambil dengan 
     bergerak secara diagonal naik atau turun, membentuk 
     pola seperti ular tangga.

### Analogi Transposisi Route

Mari kita gunakan analogi kelas dengan siswa yang duduk di kursi dalam bentuk grid untuk menjelaskan algoritma transposisi route menggunakan pola spiral.

Bayangkan kamu adalah guru yang ingin mengatur ulang tempat duduk siswa sesuai pola spiral. Anda mulai dengan siswa pertama di sudut kiri atas, lalu bergerak ke kanan hingga akhir baris, turun ke baris berikutnya di sebelah kanan, kemudian bergerak ke kiri, dan seterusnya, sampai Anda kembali ke tengah grid. Berikut langkahnya :

1. Susunan awal :

   ![](assets/kriptografi/troutee.png){width="80%"  
        style="text-align:center;"}

2. Pola spiral
   Sekarang kita akan membaca huruf-huruf dalam pola spiral, 
   dimulai dari sudut kiri atas dan bergerak searah jarum 
   jam.

3. Baca sesuai pola spiral
   Kita mulai dari A dan mengikuti pola spiral :
   ![](assets/kriptografi/troute2.png){width="80%"  
        style="text-align:center;"}

        Jika kita menulis urutan bacaan tersebut, kita 
        mendapatkan : A B C D H L P O N M I E F G K J
        
4. Sekarang kita menulis ulang huruf-huruf tersebut sesuai 
   urutan bacaan spiral :
    ![](assets/kriptografi/troute.png){width="80%"  
        style="text-align:center;"}

## Implementasi Pada Python

Masukkan Plaintext 
```python
CONTOH : TENTUKAN PRIORITAS ANDA SEBAB KITA TIDAK DAPAT MENGERJAKAN SEMUANYA X
```

```python
plainText = input("Plaintext : ")
```

Masukkan Kunci 
```python
CONTOH KEY : 5
```

```python
routeKey = int(input("Kunci: "))
```

Menghapus Spasi
```python
cleanPlainTeks = plainTeks.replace(" ", "")
print(cleanPlainTeks)
```
### Proses Enkripsi

1. Menyusun teks yang sudah dibersihkan ke dalam sebuah matriks dengan kolom sebagai jumlah kolom atau lebar matriks
```python
    kolom = routeKey
    matrix = []
    panjang = len(cleanPlainTeks)
    temp = panjang/kolom
    bulat = round(temp)

    if temp - bulat == 0:
        jml_baris = bulat
    else:
        if temp - bulat < 0:
            jml_baris = bulat
        else:
            jml_baris = bulat + 1
    print(jml_baris)
```
For More Detail :

- `kolom = routeKey` : Menetapkan jumlah kolom pada matriks dengan nilai routeKey
- `matrix = []` : Menginisialisasi sebuah list kosong yang akan digunakan untuk menyimpan elemen-elemen matriks
- `panjang = len(cleanPlainTeks)` : Menghitung panjang teks yang sudah dibersihkan
- `temp = panjang/kolom` : Menghitung berapa banyak baris yang diperlukan dengan membagi panjang teks dengan jumlah kolom dan menyimpan hasilnya dalam variabel temp
- `bulat = round(temp)` : Membulatkan hasil pembagian temp ke angka terdekat dan menyimpannya ke dalam variabel bulat
- `temp - bulat == 0` : hasil pembagian tepat bulat, maka `jml_baris` diambil dari `bulat`
- `temp - bulat < 0` : hasil pembagian kurang dari bulat (mungkin karena temp lebih kecil dari bulat), dan juga mengambil `jml_baris` dari `bulat`
- `jml_baris = bulat + 1` : Jika kondisi sebelumnya tidak terpenuhi, maka perlu satu baris tambahan

2. Membuat sebuah matriks (matrix) yang berisi teks yang sudah dibersihkan (cleanPlainTeks) menggunakan nilai jml_baris dan kolom yang telah dihitung sebelumnya
```python
    for i in range(jml_baris):
        row = []
        for j in range(kolom):
            if i * kolom + j < len(cleanPlainTeks):
                elemen = cleanPlainTeks[i * kolom + j]
            else:
                elemen = " "
            row.append(elemen)
        matrix.append(row)
```
For More Detail :

- `for i in range(jml_baris)` : Loop ini mengiterasi dari 0 hingga jml_baris - 1, yang berarti setiap iterasi mewakili satu baris dalam matriks
- `row = []` : Membuat list kosong row yang akan menyimpan elemen-elemen untuk satu baris matriks
- `for j in range(kolom)` : Loop ini mengiterasi dari 0 hingga kolom - 1, yang berarti setiap iterasi mewakili satu kolom dalam matriks
- `if i * kolom + j < len(cleanPlainTeks)` : Memastikan bahwa tidak melebihi panjang dari teks yang telah dibersihkan pada saat mengakses elemen `cleanPlainTeks` untuk dimasukkan ke dalam matrix
- `elemen = x[i * kolom + j]` : Jika ya, Mengambil elemen dari teks x pada posisi i * kolom + j
- ` elemen = " "` : Jika tidak, Mengisi elemen dengan spasi kosong jika indeks berada di luar panjang teks x
-`row.append(elemen)` : Menambahkan elemen yang telah ditentukan (baik dari x atau spasi kosong) ke list row
- `matrix.append(row)` : Menambahkan list row yang berisi elemen-elemen satu baris ke dalam list matrix

3. Mencetak matrix
```python
    print("Matriks yang Anda buat:")
    for row in matrix:
        print(row)
```

4. Menghasilkan matriks transpose dari matrix yang telah dibuat
```python
    transposed_matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
    for row in transposed_matrix:
        print(row)
```
For More Detail :

- `row[i] for row in matrix` : Menghasilkan list elemen ke-i dari setiap baris dalam matrix
- `for i in range(len(matrix[0]))]` : Mengiterasi setiap indeks kolom dari matrix dan membentuk baris baru dari elemen-elemen tersebut
- `for row in transposed_matrix` : Loop ini mengiterasi melalui setiap baris dalam `transposed_matrix`
- `print(row)` : Mencetak matriks transpose dari matrix

5. String kosong yang akan digunakan untuk menyimpan teks yang terenkripsi
```python
    encrypted_text = ""
```

6. Menandai batas awal dan akhir dari baris dan kolom pada matriks transpose
```python
    start_row, end_row = len(transposed_matrix) - 1, 0
    start_col, end_col = len(transposed_matrix[0]) - 1, 0
```

7. Mengambil baris dari kanan ke kiri
```python
    while start_row >= end_row and start_col >= end_col:
        for i in range(start_col, end_col - 1, -1):
            encrypted_text += transposed_matrix[start_row][i]

        start_row -= 1
```
For More Detail :

- `while start_row >= end_row and start_col >= end_col` : loop while yang berjalan selama `start_row` lebih besar dari atau sama dengan `end_row` dan `start_col` lebih besar dari atau sama dengan `end_col`
- `for i in range(start_col, end_col - 1, -1)` : Loop ini mengiterasi dari kolom paling kanan `(start_col)` ke kolom paling kiri `(end_col - 1)`
- `encrypted_text += transposed_matrix[start_row][i]` : Menambahkan elemen dari baris `start_row` dan kolom i ke `encrypted_text`
- `start_row -= 1` : Mengurangi `start_row` untuk bergerak ke baris berikutnya ke atas

8. Mengambil kolom dari atas ke bawah
```python
    for i in range(start_row, end_row - 1, -1):
            encrypted_text += transposed_matrix[i][end_col]

        end_col += 1
```
For More Detail :

-  `for i in range(start_row, end_row - 1, -1)` : Loop ini mengiterasi dari baris `start_row` ke baris `end_row - 1`
- `encrypted_text += transposed_matrix[i][end_col]` : Menambahkan elemen dari baris i dan kolom `end_col` ke `encrypted_text`
- `end_col += 1` : Menambahkan `end_col` untuk bergerak ke kolom berikutnya ke kiri.
9. Mengecek jika sudah mencapai kolom terakhir
```python
    if start_col < end_col:
            break
```
For More Detail :

- `if start_col < end_col:` : Mengecek apakah `start_col` lebih kecil dari `end_col`
- `break` : Jika ya, keluar dari loop while.


10. Mengambil baris dari kiri ke kanan
```python
    for i in range(end_col, start_col + 1):
            encrypted_text += transposed_matrix[end_row][i]

        end_row += 1
```
For More Detail : 

- `for i in range(end_col, start_col + 1)` : Loop ini mengiterasi dari kolom `end_col` ke kolom `start_col + 1`
- `encrypted_text += transposed_matrix[end_row][i]` : Menambahkan elemen dari baris `end_row` dan kolom i ke `encrypted_text`
- `end_row += 1` : Menambahkan `end_row` untuk bergerak ke baris berikutnya ke bawah.

11. Mengecek Jika Sudah Mencapai Baris Terakhir
```python
    if start_row < end_row:
            break
```
For More Detail :

- `if start_row < end_row` : Mengecek apakah `start_row` lebih kecil dari `end_row`
- `break` : Jika ya, keluar dari loop while

12. Mengambil kolom dari bawah ke atas
```python
    for i in range(end_row, start_row + 1):
            encrypted_text += transposed_matrix[i][start_col]

        start_col -= 1
```
For More Detail :

- `for i in range(end_row, start_row + 1)` : Loop ini mengiterasi dari baris `end_row` ke baris `start_row + 1`
- `encrypted_text += transposed_matrix[i][start_col]` : Menambahkan elemen dari baris i dan `kolom start_col` ke `encrypted_text`
- `start_col -= 1` : Mengurangi `start_col` untuk bergerak ke kolom berikutnya ke kanan

13. Mencetak teks terenkripsi (ciphertext)
```python
print("Teks terenkripsi dengan pola spiral: ", encrypted_text[:length])
```
For More Detail :

- `encrypted_text[:length])` : Memotong `encrypted_text` hingga panjang teks asli (length) untuk memastikan panjangnya sama dengan teks asli

```python
HASIL CIPHERTEXT : XUAETKAADTRUTNETKIAABTDMRNANYAMKGAATBNIPNAOSSKIAEJSEANPDIEAR
```

### Proses Dekripsi
Masukkan Ciphertext
```python
cipherText = input("cipher : ")
```

Masukkan kunci
```python
routeKey = int(input("Kunci: "))
```

1. Menentukan jumlah baris yang dibutuhkan untuk membentuk sebuah matriks dengan jumlah kolom yang telah ditentukan (routeKey). Matriks ini akan berisi teks x yang telah dibersihkan
```python
    kolom = routeKey
    matrix = []
    panjang = len(x)
    temp = panjang/kolom
    length = len(x)
    bulat = round(temp)

    if temp - bulat == 0:
        jml_baris = bulat
    else:
        if temp - bulat < 0:
            jml_baris = bulat
        else:
            jml_baris = bulat + 1
    print(jml_baris)
```
For More Detail :

- `kolom = routeKey` : Menetapkan jumlah kolom pada matriks dengan nilai routeKey
- `matrix = []` : Menginisialisasi sebuah list kosong yang akan digunakan untuk menyimpan elemen-elemen matriks
- `panjang = len(x)` : Menyimpan panjang dari teks x ke dalam variabel panjang
- `temp = panjang/kolom` : Menghitung berapa banyak baris yang diperlukan dengan membagi panjang teks dengan jumlah kolom dan menyimpan hasilnya dalam variabel temp
- `length = len(x)` : Menyimpan panjang teks x ke dalam variabel length
- `bulat = round(temp)` : Membulatkan hasil pembagian temp ke angka terdekat dan menyimpannya ke dalam variabel bulat

2. Membangun matriks 2D yang berisi teks x yang telah dibersihkan (tanpa spasi), Matriks ini akan memiliki jml_baris baris dan kolom kolom
```python
    for i in range(jml_baris):
        row = []
        for j in range(kolom):
            if i * kolom + j < len(x):
                elemen = [i * kolom + j]
            else:
                elemen = " "
            row.append(elemen)
        matrix.append(row)
```
For More Detail : 

- `for i in range(jml_baris)` : Loop ini mengiterasi dari 0 hingga jml_baris - 1, yang berarti setiap iterasi mewakili satu baris dalam matriks
- `row = []` : Membuat list kosong row yang akan menyimpan elemen-elemen untuk satu baris matriks
- `for j in range(kolom)` : Loop ini mengiterasi dari 0 hingga kolom - 1, yang berarti setiap iterasi mewakili satu kolom dalam matriks
- `if i * kolom + j < len(x)` : Mengecek apakah indeks (dihitung sebagai i * kolom + j) berada dalam rentang panjang teks x
- `elemen = x[i * kolom + j]` : Jika ya, Mengambil elemen dari teks x pada posisi i * kolom + j
- ` elemen = " "` : Jika tidak, Mengisi elemen dengan spasi kosong jika indeks berada di luar panjang teks x
-`row.append(elemen)` : Menambahkan elemen yang telah ditentukan (baik dari x atau spasi kosong) ke list row
- `matrix.append(row)` : Menambahkan list row yang berisi elemen-elemen satu baris ke dalam list matrix

3. Mencetak matriks yang telah dibuat
```python
    print("Matriks yang Anda buat:")
    for row in matrix:
        print(row)
```

4. Membuat dan mencetak matriks transpose
```python
    transposed_matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
    for row in transposed_matrix:
        print(row)
```
For More Detail :

- `row[i] for row in matrix` : Menghasilkan list elemen ke-i dari setiap baris dalam matrix
- `for i in range(len(matrix[0]))]` : Mengiterasi setiap indeks kolom dari matrix dan membentuk baris baru dari elemen-elemen tersebut
- `for row in transposed_matrix` : Loop ini mengiterasi melalui setiap baris dalam transposed_matrix

5. Mengatur batas-batas dan kontrol iterasi saat mengisi transposed_matrix dalam pola spiral dengan karakter-karakter dari teks x
```python
    start_row, end_row = len(transposed_matrix) - 1, 0
    start_col, end_col = len(transposed_matrix[0]) - 1, 0
    text_index = 0
```
For More Detail :

- `start_row` : Mengendalikan pengisian dari baris terakhir ke atas
- `end_row` : Mengendalikan pengisian dari baris pertama ke bawah
- `end_row = 0 ` : Menetapkan indeks baris awal ke 0, yang berarti kita mulai dari baris pertama
- `len(transposed_matrix)` : Memberikan jumlah baris dalam `transposed_matrix`
- Mengurangkan 1 untuk mendapatkan indeks baris terakhir dari matriks transpose
- `start_col` : Mengendalikan pengisian dari kolom terakhir ke kiri, sedangkan 
- `end_col` : Mengendalikan pengisian dari kolom pertama ke kanan
- `len(transposed_matrix[0])` : Memberikan jumlah kolom dalam `transposed_matrix`
- Mengurangkan 1 untuk mendapatkan indeks kolom terakhir dari matriks transpose
- `end_col = 0` : Menetapkan indeks kolom awal ke 0, yang berarti kita mulai dari kolom pertama
- `text_index` : Melacak posisi karakter dalam teks x yang sedang diproses

6. Mengisi baris pertama dari kanan ke kiri
```python
    while start_row >= end_row and start_col >= end_col:
        # Fill the first row from the remaining rows
        for i in range(start_col, end_col - 1, -1):
            if text_index < len(x):
                transposed_matrix[start_row][i] = x[text_index]
                text_index += 1

        start_row -= 1
```
For More Detail :

- `start_col` dan `end_col` : menentukan rentang kolom yang akan diisi
- `text_index` : mengambil karakter dari teks x.
- `Transposed_matrix[start_row][i]` : Setiap karakter yang diambil dari x dimasukkan ke dalam posisi yang sesuai di t.

7. Mengisi kolom terakhir dari baris yang tersisa dalam matriks dengan karakter dari x dalam urutan spiral
```python
    for i in range(start_row, end_row - 1, -1):
            if text_index < len(x):
                transposed_matrix[i][end_col] = x[text_index]
                text_index += 1

        end_col += 1
```
For More Detail :

- `for i in range(start_row, end_row - 1, -1)` : Loop ini digunakan untuk iterasi melalui baris-baris dalam matriks dari `start_row` ke `end_row - 1` dalam urutan menurun 
- `start_row` : Posisi baris awal untuk iterasi
- `end_row - 1` : Posisi baris akhir (tidak termasuk) untuk iterasi
- `-1` : Menunjukkan bahwa iterasi dilakukan secara menurun 
- `if text_index < len(cipherText)` : Kondisi ini memastikan bahwa indeks text_index masih dalam batas panjang cipherText
- `transposed_matrix[i][end_col]` : Menunjukkan posisi kolom `end_col` dalam baris i dari matriks yang sedang diisi
- `cipherText[text_index]` : Karakter dari cipherText pada indeks text_index
- `text_index += 1` : Setelah menempatkan karakter dari cipherText ke dalam `transposed_matrix`, nilai `text_index` dinaikkan sebesar 1 untuk mempersiapkan karakter berikutnya pada iterasi selanjutnya
- `end_col += 1` : Setelah menyelesaikan iterasi untuk mengisi kolom terakhir dari baris yang tersisa, `end_col` dinaikkan sebesar 1 untuk mempersempit batas kolom yang akan diisi pada iterasi berikutnya


8. Menentukkan apakah batas kolom telah bertemu atau melewati satu sama lain, yang berarti bahwa semua kolom yang perlu diisi sudah selesai diproses
```python
    if start_col < end_col:
            break
```

9. Mengisi baris terakhir dari kolom yang tersisa dalam matriks dengan karakter dari x dalam urutan spiral.
```python
    for i in range(end_col, start_col + 1):
            if text_index < len(x):
                transposed_matrix[end_row][i] = x[text_index]
                text_index += 1

        end_row += 1
```
For More Detail :

- `for i in range(end_col, start_col + 1)`: Loop ini digunakan untuk iterasi melalui kolom dari `end_col` ke `start_col + 1`
- `end_col`: Posisi kolom awal untuk iterasi
- `start_col + 1`: Posisi kolom akhir (tidak termasuk) untuk iterasi, Menambah 1 untuk memasukkan start_col dalam iterasi
- `if text_index < len(x)` : Kondisi ini memastikan bahwa indeks
- `text_index` : Masih dalam batas panjang `x`. Hal ini untuk menghindari akses indeks yang tidak valid dari `x`
- `transposed_matrix[end_row][i] = x[text_index]` Menetapkan karakter dari `x` pada posisi indeks `text_index` ke posisi `[end_row][i]` dalam `transposed_matrix`
- `transposed_matrix[end_row][i]`: Menunjukkan posisi kolom `i` dalam baris end_row dari matriks yang sedang diisi.
- `x[text_index]`: Karakter dari `x` pada indeks `text_index`
- `text_index += 1` Setelah menempatkan karakter dari `x` ke dalam `transposed_matrix`, nilai `text_index` dinaikkan sebesar 1 untuk mempersiapkan karakter berikutnya pada iterasi selanjutnya
- `end_row += 1` Setelah menyelesaikan iterasi untuk mengisi baris terakhir dari kolom yang tersisa, batas baris akhir (`end_row`) dinaikkan sebesar 1 untuk mempersempit batas baris yang akan diisi pada iterasi berikutnya

10. Menghentikan loop while jika batas baris bertemu atau melewati satu sama lain, menandakan bahwa pengisian matriks dalam pola spiral sudah selesai 
```python
    if start_row < end_row:
            break
```

11. Mengisi baris terakhir dari kolom yang tersisa dalam matriks dengan karakter dari x dalam urutan spiral
```python
    for i in range(end_row, start_row + 1):
            if text_index < len(x):
                transposed_matrix[i][start_col] = x[text_index]
                text_index += 1

        start_col -= 1
```
For More Detail :

- `for i in range(end_row, start_row + 1)` : Loop ini digunakan untuk iterasi melalui baris dari end_row ke start_row + 1 dalam urutan meningkat
- `end_row` : Posisi baris awal untuk iterasi
- `start_row + 1` : Posisi baris akhir (tidak termasuk) untuk iterasi, Menambah 1 untuk memasukkan start_row dalam iterasi
- `if text_index < len(x)` : Kondisi ini memastikan bahwa indeks text_index masih dalam batas panjang x
- `transposed_matrix[i][start_col]` : Menunjukkan posisi kolom start_col dalam baris i dari matriks yang sedang diisi
- `x[text_index]` : Karakter dari x pada indeks text_index
- `text_index += 1` : Nilai text_index dinaikkan sebesar 1 untuk mempersiapkan karakter berikutnya pada iterasi selanjutnya
- `start_col -= 1` : Batas kolom awal (start_col) dikurangi sebesar 1 untuk mempersempit batas kolom yang akan diisi pada iterasi berikutnya

12. Mencetak matriks yang telah diisi dengan ciphertext
```python
    print("Matriks setelah diisi dengan cipher secara spiral:")
    for row in transposed_matrix:
        print(row)
```

13. String kosong untuk menyimpan hasil teks yang telah didekripsi
```python
    decrypted_text = ""
```

14. Menyimpan jumlah baris dari transposed_matrix dalam variabel num_rows
```python
    num_rows = len(transposed_matrix)
```

15. Menghitung jumlah kolom dalam transposed_matrix
```python
    num_cols = len(transposed_matrix[0])
```

16. Menggabungkan karakter-karakter dari transposed_matrix ke dalam decrypted_text dengan membaca matriks secara kolom demi kolom
```python
    for col in range(num_cols):  
        for row in range(num_rows):  
            decrypted_text += transposed_matrix[row][col]
```
For More Detail :

- `for col in range(num_cols)`: Loop for ini digunakan untuk iterasi melalui setiap kolom dalam transposed_matrix.
- `num_cols` : Jumlah kolom dalam transposed_matrix Ini mengontrol jumlah iterasi, memastikan bahwa setiap kolom dalam matriks diproses
- `for row in range(num_rows)` : Loop ini digunakan untuk iterasi melalui setiap baris dalam `transposed_matrix` untuk kolom yang saat ini sedang diproses oleh loop luar
- `num_rows` : Jumlah baris dalam transposed_matrix Ini mengontrol jumlah iterasi, memastikan bahwa setiap baris dalam kolom yang sedang diproses dipertimbangkan
- `transposed_matrix[row][col]` : Mengakses elemen pada baris row dan kolom col dalam matriks
- `decrypted_text +=: Operator +=` : Menambahkan karakter ke string decrypted_text

17. Mencetak hasil teks terdeskripsi
```python
    print("Teks terdekripsi setelah membaca secara berurutan:")
    print(decrypted_text)
```

```python
Hasil Decrypted :
TENTUKANPRIORITASANDASEBABKITATIDAKDAPATMENGERJAKANSEMUANYAX
```
